

services:
  # Base de données MySQL
  mysql:
    image: mysql:8.0
    container_name: ecommerce_mysql
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE:-ecommerce}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-rootpassword}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
      MYSQL_USER: ${DB_USERNAME:-ecommerce_user}
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/my.cnf:/etc/mysql/conf.d/my.cnf
    networks:
      - ecommerce_network
    command: --default-authentication-plugin=mysql_native_password

  # Redis pour le cache et les sessions
  redis:
    image: redis:7-alpine
    container_name: ecommerce_redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - ecommerce_network
    command: redis-server --appendonly yes

  # Application Laravel
  app:
    build:
      context: .
      dockerfile: Dockerfile.working
    container_name: ecommerce_app
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - ecommerce_network
    depends_on:
      - mysql


      
      - redis
    environment:
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-ecommerce}
      - DB_USERNAME=${DB_USERNAME:-ecommerce_user}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_PORT=6379
      
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - QUEUE_CONNECTION=redis

  # Serveur web Nginx
  nginx:
    image: nginx:alpine
    container_name: ecommerce_nginx
    restart: unless-stopped
    ports:
      - "${APP_PORT:-80}:80"
      - "${APP_SSL_PORT:-443}:443"
    volumes:
      - ./:/var/www/html
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - ecommerce_network
    depends_on:
      - app

  # Node.js pour le développement frontend (optionnel)
  node:
    image: node:18-alpine
    container_name: ecommerce_node
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./:/app
      - /app/node_modules
    ports:
      - "${VITE_PORT:-5173}:5173"
    networks:
      - ecommerce_network
    command: sh -c "npm install && npm run dev"
    profiles:
      - dev

  # Worker pour les tâches en arrière-plan (queues)
  worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ecommerce_worker
    restart: unless-stopped
    working_dir: /var/www/html
    volumes:
      - ./:/var/www/html
    networks:
      - ecommerce_network
    depends_on:
      - mysql
      - redis
    environment:
      - APP_ENV=${APP_ENV:-production}
      - APP_DEBUG=${APP_DEBUG:-false}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-ecommerce}
      - DB_USERNAME=${DB_USERNAME:-ecommerce_user}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=redis
    command: php artisan queue:work --verbose --tries=3 --timeout=90

  # Mailhog pour tester les emails en développement
  mailhog:
    image: mailhog/mailhog:latest
    container_name: ecommerce_mailhog
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - ecommerce_network
    profiles:
      - dev

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local

networks:
  ecommerce_network:
    driver: bridge
