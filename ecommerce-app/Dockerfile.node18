# Dockerfile avec Node.js 18.17.0 spécifique
FROM node:18.17.0-alpine AS node-base

# Installer PHP et ses dépendances dans l'image Node.js
RUN apk add --no-cache \
    php82 \
    php82-fpm \
    php82-pdo \
    php82-pdo_mysql \
    php82-mbstring \
    php82-xml \
    php82-zip \
    php82-curl \
    php82-gd \
    php82-intl \
    php82-opcache \
    php82-bcmath \
    php82-pcntl \
    php82-exif \
    php82-phar \
    git \
    curl \
    libpng-dev \
    libxml2-dev \
    zip \
    unzip \
    oniguruma-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    libzip-dev \
    sqlite-dev \
    icu-dev \
    libpq-dev

# Créer des liens symboliques pour PHP
RUN ln -sf /usr/bin/php82 /usr/bin/php \
    && ln -sf /usr/bin/php-fpm82 /usr/bin/php-fpm

# Installer Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Créer un utilisateur non-root
RUN addgroup -g 1001 www && \
    adduser -u 1001 -G www -s /bin/sh -D www

# Définir le répertoire de travail
WORKDIR /var/www/html

# Copier les fichiers de l'application
COPY --chown=www:www . .

# Installer les dépendances Composer
RUN composer install --optimize-autoloader --no-interaction

# Installer les dépendances Node.js et build des assets
RUN npm ci && npm run build

# Configurer les permissions
RUN chown -R www:www /var/www/html \
    && chmod -R 755 /var/www/html/storage \
    && chmod -R 755 /var/www/html/bootstrap/cache

# Exposer le port
EXPOSE 9000

# Changer vers l'utilisateur non-root
USER www

# Démarrer PHP-FPM
CMD ["php-fpm"]
